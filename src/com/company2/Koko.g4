grammar Koko;
prog: (line | NEWLINE)*;
line: expr | functionHeader | statement;
expr: ifStatement | block | mathExpr | stringLiteral | listLiteral;
statement: ifStatement | assignment | returnStatement | functionCall ;
listLiteral : LEFT_BLOCK (NUMBER COMMA?)+ RIGHT_BLOCK ;
returnStatement: RETURN SPACE ( stringLiteral | IDENTIFIER ) ;
functionCall: functionName SPACE IDENTIFIER ;
mathExpr: IDENTIFIER SPACE MOD SPACE NUMBER ;
block: (TAB (expr | statement))+ ;
ifStatement: IF SPACE mathExpr ;
assignment: STAR IDENTIFIER SPACE EQUAL SPACE (NUMBER | IDENTIFIER | listLiteral);
functionHeader: functionName (LEFT_PAREN functionArgument RIGHT_PAREN)? SPACE returnType ;
functionName: IDENTIFIER ;
functionArgument: IDENTIFIER SPACE IDENTIFIER ;
returnType: IDENTIFIER ;
stringLiteral: STRING ;

RETURN: 'ret' ;
STRING: '"' IDENTIFIER '"' ;
TAB: '\t' ;
IF: 'if' ;
IDENTIFIER: [a-z]+ ;
NUMBER: [0-9]+ ;
LEFT_PAREN: '(' ;
RIGHT_PAREN: ')' ;
LEFT_BLOCK: '[' ;
RIGHT_BLOCK: ']' ;
COLON: ':' ;
MOD: '%' ;
STAR: '*' ;
EQUAL: '=' ;
SPACE: ' ';
COMMA: ',' ;
QUOTE: '"' ;
NEWLINE: '\n' ;
DOT: '.' ;
ANY : [a-z]+ ;